Changes for 2.2.0
=================
- One of the biggest changes in this release is the behavior of the "cobertura"
  task.  In 2.1.0, it was made to run all the tests in the applying project, as
  well as tests named "test" in other parts of a multi-project build.  This
  produces undesirable coupling between projects, so this has been removed in
  2.2.0.  The "cobertura" task now runs only the tests in project. (issue #31)

- The exact tasks that get run by the "cobertura" task can be configured by
  setting the coverageTestTasks closure.  Ths no-arg closure returns the
  collection of tasks that should run before the coverage report is generated.

- Users who need to use older versions of Cobertura can now do so without the
  Cobertura libraries getting in the way. Some options, such as
  coverageIgnoreTrivial only work in Cobertura 2.0, so attempting to set those
  properties in the cobertura block of your build.gradle will result in an
  error.

- Groovy and Scala plugins may now be applied after the cobertura plugin.

- If the coberturaReport is in the task graph, the up-to-date status of all
  tests is set to false (issue #33)

- Check task implemented. (issue #29)  It definitely has some quirks.  If the
failure property is set, and tests fail, the build will fail, but the check
task will set the failure message, possibly hiding the fact that tests failed.

Changes for 2.1.0
=================
- Added the coberturaReport task to generate coverage reports. (issue #20)

- The cobertura task now depends on tasks of type test in the applying project,
  and tasks named test in child projects (but not all tasks of type test in the
  child project).  It no longer runs tests in parent projects, sibling projects
  or tests in child projects that are not named "test". (issue #14)

- The coverageSourceDirs extension property now looks for scala and groovy code
  by default. (issues #7 and #22)

- Instrumentation now happens only when source code has changed or the cobertura
  configuration has changed. (issue #23)

- Instrumentation now depends on the classes task so that changes to Groovy
  or Scala source code triggers re-instrumentation. (issue #15)

- The plugin adjusts dependencies for test tasks added after the plugin is
  applied (issue #21)

Changes for 2.0.0
=================
- Updated the plugin to work with Gradle 1.7.  Dropped support for prior
  versions of Gradle.

Changes for 1.2.0
=================
- Added support for Cobertura 2.0 and its extra configuration options.

- Fixed bug that caused the configuration of test tasks to fail on sub-projects
  that don't have the coberura plugin applied. (issue #8)
